name: 🔮 Mythica Report - Automated Mystery Shorts Pipeline

on:
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Platforms to upload to (e.g., youtube,tiktok,facebook)'
        required: false
        default: 'youtube,facebook'
      force_all:
        description: 'Force upload to all enabled platforms'
        required: false
        type: boolean
        default: false
      ignore_schedule:
        description: 'Bypass the scheduler and post immediately'
        required: false
        type: boolean
        default: false
      mystery_type:
        description: 'Specific mystery category (e.g., crime, paranormal, historical, auto)'
        required: false
        default: 'auto'
        
  schedule:
    # 🔮 RUNS HOURLY, LETS THE SCHEDULER SCRIPT DECIDE
    # The dedicated optimal_scheduler.py script now contains all the optimal time logic.
    # This is much cleaner and keeps the schedule managed in one central file.
    - cron: '0 * * * *'

jobs:
  build_and_upload:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: 🔮 Checkout Mythica Report
        uses: actions/checkout@v4

      - name: 🔐 Validate secrets
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          # Add other critical secrets here
        run: |
          if [ -z "$GEMINI_API_KEY" ]; then echo "GEMINI_API_KEY is not set!"; exit 1; fi
          if [ -z "$GOOGLE_CLIENT_ID" ]; then echo "GOOGLE_CLIENT_ID is not set!"; exit 1; fi
          echo "✅ Core secrets validated."

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 💾 Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-mythica-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-mythica-

      - name: 📦 Install scheduler dependency
        run: |
          python -m pip install --upgrade pip
          pip install pytz

      - name: 📅 Run Mythica Report Scheduler
        id: scheduler
        run: python .github/scripts/optimal_scheduler.py

      - name: 📊 Display Scheduling Decision
        run: |
          echo "=================================================="
          echo "🔮 MYTHICA REPORT SCHEDULING DECISION"
          echo "=================================================="
          echo "⏰ Current Time (EST): ${{ steps.scheduler.outputs.current_time_est }}"
          echo "✅ Should Post: ${{ steps.scheduler.outputs.should_post }}"
          echo "⭐ Priority: ${{ steps.scheduler.outputs.current_priority }}"
          echo "📚 Content Type: ${{ steps.scheduler.outputs.current_content_type }}"
          echo "=================================================="

      - name: ⏸️ Skip run if not an optimal posting time
        if: steps.scheduler.outputs.should_post != 'true'
        run: |
          echo "⏸️ Skipping run. It is not an optimal posting time for Mythica Report."
          echo "ℹ️ To force a post, run this workflow with 'ignore_schedule: true'."
          exit 0
      
      # The rest of the pipeline only runs if should_post is true
      
      - name: 🔧 Install System Dependencies
        if: steps.scheduler.outputs.should_post == 'true'
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y -qq \
            ffmpeg \
            libsm6 \
            libxext6 \
            imagemagick \
            fonts-dejavu-core \
            fonts-liberation \
            fonts-freefont-ttf \
            fonts-dejavu \
            espeak-ng
          echo "✅ System ready for mystery content generation"

      - name: 🎙️ Cache Coqui models
        if: steps.scheduler.outputs.should_post == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.local/share/tts
          key: coqui-models-mythica-${{ runner.os }}

      - name: 📁 Prepare the Archives (tmp folder)
        if: steps.scheduler.outputs.should_post == 'true'
        run: mkdir -p tmp

      # ✅ RESTORED: Your detailed cache steps
      - name: 📚 Restore content history
        if: steps.scheduler.outputs.should_post == 'true'
        uses: actions/cache/restore@v4
        with:
          path: tmp/content_history.json
          key: content-history-mythica-${{ github.run_number }}
          restore-keys: |
            content-history-mythica-

      - name: 📦 Install Full Python Dependencies
        if: steps.scheduler.outputs.should_post == 'true'
        run: pip install -r requirements.txt

      - name: 🎵 Download background music library
        if: steps.scheduler.outputs.should_post == 'true'
        run: python .github/scripts/download_music.py --download-all
        continue-on-error: true

      - name: 🕵️ Fetch Trending Mystery Topics
        if: steps.scheduler.outputs.should_post == 'true'
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          MYSTERY_TYPE: ${{ github.event.inputs.mystery_type }}
        run: python .github/scripts/fetch_trending.py

      - name: ✍️ Generate Mystery Script
        if: steps.scheduler.outputs.should_post == 'true'
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          CONTENT_TYPE: ${{ steps.scheduler.outputs.current_content_type }}
        run: python .github/scripts/generate_trending_and_script.py

      - name: 🎙️ Generate Mysterious Voiceover
        if: steps.scheduler.outputs.should_post == 'true'
        run: python .github/scripts/generate_tts.py

      - name: 🎬 Create Mystery Video
        if: steps.scheduler.outputs.should_post == 'true'
        run: python .github/scripts/create_video.py

      - name: 🖼️ Generate Mysterious Thumbnail
        if: steps.scheduler.outputs.should_post == 'true'
        run: python .github/scripts/generate_thumbnail.py

      - name: 🧹 Clean up temporary files
        if: steps.scheduler.outputs.should_post == 'true'
        run: |
          find tmp -name "scene_*.jpg" -type f -delete 2>/dev/null || true
          find tmp -name "*_noir.jpg" -type f -delete 2>/dev/null || true
          echo "🧹 Cleaned up temporary image files"

      - name: 📤 Upload to Platforms
        if: steps.scheduler.outputs.should_post == 'true'
        env:
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REFRESH_TOKEN: ${{ secrets.GOOGLE_REFRESH_TOKEN }}
          FACEBOOK_PAGE_ID: ${{ secrets.FACEBOOK_PAGE_ID }}
          FACEBOOK_ACCESS_TOKEN: ${{ secrets.FACEBOOK_ACCESS_TOKEN }}
          MAKECOM_WEBHOOK_URL: ${{ secrets.MAKECOM_WEBHOOK_URL }} # Keep for logging if needed
          PLATFORMS: ${{ github.event.inputs.platforms }}
          FORCE_ALL: ${{ github.event.inputs.force_all }}
        run: python .github/scripts/upload_multiplatform.py

      - name: 📂 Find actual video file
        if: success() && steps.scheduler.outputs.should_post == 'true'
        id: find_video
        run: |
          VIDEO_PATH=$(find tmp -name "*.mp4" -type f | head -n 1)
          if [ -z "$VIDEO_PATH" ]; then echo "❌ No video file found!"; exit 1; fi
          echo "video_path=$VIDEO_PATH" >> $GITHUB_OUTPUT
          echo "✅ Video file found: $VIDEO_PATH"

      # ✅ RESTORED: Cloudinary upload step
      - name: ☁️ Upload video to Cloudinary
        if: success() && steps.scheduler.outputs.should_post == 'true'
        id: upload_temp
        env:
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
        run: |
          echo "📤 Uploading to Cloudinary for webhook..."
          export VIDEO_TO_UPLOAD="${{ steps.find_video.outputs.video_path }}"
          python .github/scripts/upload_to_cloudinary.py
          
          if [ -f tmp/video_url.txt ]; then
            VIDEO_URL=$(cat tmp/video_url.txt)
            echo "video_url=$VIDEO_URL" >> $GITHUB_OUTPUT
            echo "✅ Video URL from Cloudinary: $VIDEO_URL"
          fi

      # ✅ RESTORED: Your original, detailed Make.com payload preparation
      - name: 📋 Prepare Make.com Payload
        id: makecom_prep
        if: success() && steps.scheduler.outputs.should_post == 'true'
        run: |
          PAYLOAD_FILE="tmp/makecom_payload.json"
          VIDEO_URL="${{ steps.upload_temp.outputs.video_url }}"
          
          # Safely extract data from script.json using jq
          TITLE=$(jq -r '.title // "Untitled Mystery"' tmp/script.json)
          DESCRIPTION=$(jq -r '.description // "A chilling mystery from the Mythica Report archives."' tmp/script.json)
          HASHTAGS=$(jq -r '(.hashtags // []) | join(" ")' tmp/script.json)

          # Safely get URLs from log file
          LOG_FILE="tmp/multiplatform_log.json"
          YOUTUBE_URL=$(jq -r '.[-1].results[]? | select(.platform=="youtube") | .url // ""' "$LOG_FILE" 2>/dev/null)
          FACEBOOK_URL=$(jq -r '.[-1].results[]? | select(.platform=="facebook") | .url // ""' "$LOG_FILE" 2>/dev/null)
          
          # Create JSON payload using jq for robustness
          jq -n \
            --arg title "$TITLE" \
            --arg description "$DESCRIPTION" \
            --arg hashtags "$HASHTAGS" \
            --arg video_url "$VIDEO_URL" \
            --arg content_type "${{ steps.scheduler.outputs.current_content_type }}" \
            --arg priority "${{ steps.scheduler.outputs.current_priority }}" \
            --arg youtube_url "$YOUTUBE_URL" \
            --arg facebook_url "$FACEBOOK_URL" \
            '{
              "title": $title,
              "description": $description,
              "hashtags": $hashtags,
              "video_url": $video_url,
              "niche": "mystery",
              "channel": "Mythica Report",
              "content_type": $content_type,
              "priority": $priority,
              "platform_urls": {
                "youtube": $youtube_url,
                "facebook": $facebook_url
              },
              "github": {
                "run_id": "${{ github.run_id }}",
                "repository": "${{ github.repository }}"
              }
            }' > "$PAYLOAD_FILE"
            
          echo "✅ Make.com payload prepared."
          cat "$PAYLOAD_FILE"

      # ✅ RESTORED: Make.com webhook step
      - name: 🔗 Send to Make.com Webhook
        if: success() && steps.scheduler.outputs.should_post == 'true' && env.MAKECOM_WEBHOOK_URL != ''
        env:
          MAKECOM_WEBHOOK_URL: ${{ secrets.MAKECOM_WEBHOOK_URL }}
        run: |
          curl -X POST "$MAKECOM_WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -H "User-Agent: GitHub-Actions-Mythica-Report" \
            -d "@tmp/makecom_payload.json"
          echo "✅ Webhook sent to Make.com"

      - name: 📁 Organize into Playlists
        if: success() && steps.scheduler.outputs.should_post == 'true'
        env:
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REFRESH_TOKEN: ${{ secrets.GOOGLE_REFRESH_TOKEN }}
        run: python .github/scripts/manage_playlists.py

      # ✅ RESTORED: Your final caching and artifact steps
      - name: 💾 Save content history
        uses: actions/cache/save@v4
        if: always() && steps.scheduler.outputs.should_post == 'true'
        with:
          path: tmp/content_history.json
          key: content-history-mythica-${{ github.run_number }}

      - name: 📦 Upload Artifacts
        uses: actions/upload-artifact@v4
        if: always() && steps.scheduler.outputs.should_post == 'true'
        with:
          name: mythica-report-short-${{ github.run_number }}
          path: |
            tmp/*.mp4
            tmp/*.png
            tmp/*.json
            tmp/*.mp3
          retention-days: 30

      - name: 📋 Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: error-logs-mythica-${{ github.run_number }}
          path: tmp/*.log
          retention-days: 7

      - name: 📝 Workflow Summary
        if: always()
        run: |
          echo "## 🔮 Mythica Report - Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.scheduler.outputs.should_post }}" == "true" ]; then
            echo "✅ **Video generation and upload process was triggered.**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|---|---|" >> $GITHUB_STEP_SUMMARY
            echo "| **Time (EST)** | \`${{ steps.scheduler.outputs.current_time_est }}\` |" >> $GITHUB_STEP_SUMMARY
            echo "| **Content Type** | \`${{ steps.scheduler.outputs.current_content_type }}\` |" >> $GITHUB_STEP_SUMMARY
            echo "| **Priority** | \`${{ steps.scheduler.outputs.current_priority }}\` |" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Video generation was SKIPPED.**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "This was not an optimal posting time according to the Mythica Report schedule. The next check will be in one hour." >> $GITHUB_STEP_SUMMARY
          fi