name: üîç The Mystery Archives - Automated Mystery Shorts Pipeline

on:
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Platforms to upload to (comma-separated: youtube,tiktok,instagram,facebook,makecom)'
        required: false
        default: 'youtube,facebook'
      force_all:
        description: 'Force upload to all enabled platforms'
        required: false
        type: boolean
        default: false
      ignore_schedule:
        description: 'Ignore optimal timing and post immediately'
        required: false
        type: boolean
        default: false
      mystery_type:
        description: 'Mystery category (disappearance, crime, historical, conspiracy, auto)'
        required: false
        default: 'auto'
      intensity:
        description: 'Content intensity (aggressive, balanced, inspirational)'
        required: false
        default: 'balanced'
        
  schedule:
    # Runs every hour. The python script then checks if an optimal posting time occurred within the last hour.
    - cron: '0 * * * *'

jobs:
  build_and_upload:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: üîç Checkout Mystery Archives
        uses: actions/checkout@v4

      # ... (Validate secrets, Setup Python, Cache pip packages steps are unchanged)

      - name: üîê Validate secrets
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          HUGGINGFACE_API_KEY: ${{ secrets.HUGGINGFACE_API_KEY }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REFRESH_TOKEN: ${{ secrets.GOOGLE_REFRESH_TOKEN }}
          MAKECOM_WEBHOOK_URL: ${{ secrets.MAKECOM_WEBHOOK_URL }}
        run: python .github/scripts/validate_secrets.py

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: üíæ Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-mystery-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-mystery-
            ${{ runner.os }}-pip-

      - name: üì¶ Install Python packages (for scheduler check)
        run: |
          python -m pip install --upgrade pip
          pip install pytz

      - name: üîÆ Check Mythica Report optimal posting time
        id: schedule_check
        env:
          IGNORE_SCHEDULE: ${{ github.event.inputs.ignore_schedule }}
        run: |
          python -c "
          import os
          from datetime import datetime, timedelta
          import pytz

          # --- Configuration from optimal_scheduler.py ---
          tz = pytz.timezone('US/Eastern')
          
          # Schedule now supports times with minutes (e.g., '20:30').
          OPTIMAL_SCHEDULE = {
              # Monday
              0: {'times': ['20:00'], 'content_types': ['unsolved_true_crime'], 'priority': ['high']},
              # Tuesday
              1: {'times': ['21:00'], 'content_types': ['paranormal_hauntings'], 'priority': ['high']},
              # Wednesday
              2: {'times': ['20:00'], 'content_types': ['historical_mysteries'], 'priority': ['high']},
              # Thursday
              3: {'times': ['21:00'], 'content_types': ['cosmic_and_sci_fi'], 'priority': ['highest']},
              # Friday
              4: {'times': ['15:00', '21:00'], 'content_types': ['internet_and_modern', 'unsolved_true_crime'], 'priority': ['medium', 'highest']},
              # Saturday
              5: {'times': ['12:00', '16:00', '21:00'], 'content_types': ['high_strangeness', 'historical_mysteries', 'paranormal_hauntings'], 'priority': ['medium', 'high', 'highest']},
              # Sunday
              6: {'times': ['19:00'], 'content_types': ['unsolved_true_crime'], 'priority': ['highest']}
          }
          
          # --- Scheduling Logic with Time Window ---

          ignore_schedule = os.getenv('IGNORE_SCHEDULE', 'false').lower() == 'true'
          
          current_time = datetime.now(tz)
          weekday = current_time.weekday()
          
          should_post = False
          priority = 'low'
          content_type = 'off_schedule'
          
          if ignore_schedule:
              print('‚ö†Ô∏è Schedule check BYPASSED by user input (ignore_schedule: true).')
              should_post = True
              priority = 'manual'
              content_type = 'manual_dispatch'
              print('Setting content_type to \'manual_dispatch\' for this forced run.')
          else:
              print(f'Checking schedule for run at: {current_time.strftime(\"%A, %I:%M %p EST\")}')
              if weekday in OPTIMAL_SCHEDULE:
                  day_schedule = OPTIMAL_SCHEDULE[weekday]
                  # This workflow runs hourly. We check if any scheduled time was in the last 59 minutes.
                  one_hour_ago = current_time - timedelta(minutes=59)
                  
                  for i, time_str in enumerate(day_schedule['times']):
                      hour, minute = map(int, time_str.split(':'))
                      # Create a datetime object for the scheduled time on the current day
                      scheduled_dt = current_time.replace(hour=hour, minute=minute, second=0, microsecond=0)
                      
                      # Check if the scheduled time is in the past, but within our 1-hour window.
                      if one_hour_ago <= scheduled_dt <= current_time:
                          should_post = True
                          priority = day_schedule['priority'][i]
                          content_type = day_schedule['content_types'][i]
                          print(f'‚úÖ Optimal time window found! The time is now {current_time.strftime(\"%H:%M\")}, and the scheduled time was {time_str}.')
                          print(f'   -> Posting Content: {content_type.replace(\"_\", \" \").title()} (Priority: {priority})')
                          break # Found a match, no need to check other times for this hour
              
              if not should_post:
                  print('‚è≥ No scheduled posts within the last hour.')

          # Write outputs for subsequent steps
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f'should_post={str(should_post).lower()}\n')
              f.write(f'priority={priority}\n')
              f.write(f'content_type={content_type}\n')
              f.write(f'current_time={current_time.strftime(\"%Y-%m-%d %H:%M EST\")}\n')
          "

      - name: üìÖ Display mystery scheduling decision
        run: |
          echo "‚è∞ Current Time (EST): ${{ steps.schedule_check.outputs.current_time }}"
          echo "üéØ Should Post: ${{ steps.schedule_check.outputs.should_post }}"
          echo "‚≠ê Priority: ${{ steps.schedule_check.outputs.priority }}"
          echo "üîç Content Type: ${{ steps.schedule_check.outputs.content_type }}"
          echo ""
          echo "üí° Logic: This workflow runs hourly and posts if a scheduled time occurred within the last hour."

      - name: ‚è∏Ô∏è Skip if not optimal mystery time
        if: steps.schedule_check.outputs.should_post != 'true'
        run: |
          echo "‚è∏Ô∏è Skipping run - not within an optimal posting window."
          echo "‚ÑπÔ∏è The workflow runs hourly and posts only if a scheduled time has occurred in the past hour."
          echo "‚ÑπÔ∏è To run immediately, use the 'Run workflow' button with 'ignore_schedule' set to true."
          exit 0

      # ... (The rest of your workflow from "Cache apt packages" onwards remains IDENTICAL)
      # ... All `if: steps.schedule_check.outputs.should_post == 'true'` conditions will work as expected.
      
      - name: üì¶ Cache apt packages
        if: steps.schedule_check.outputs.should_post == 'true'
        uses: actions/cache@v4
        with:
          path: |
            /var/cache/apt/archives
            /var/lib/apt/lists
          key: ${{ runner.os }}-apt-mystery-${{ hashFiles('.github/workflows/mystery_shorts.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-mystery-
            ${{ runner.os }}-apt-

      - name: üîß Install system deps
        if: steps.schedule_check.outputs.should_post == 'true'
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y -qq \
            ffmpeg \
            libsm6 \
            libxext6 \
            imagemagick \
            fonts-dejavu-core \
            fonts-liberation \
            fonts-freefont-ttf \
            fonts-dejavu \
            espeak-ng
          echo "üîç System ready for mystery content generation"

      - name: üéôÔ∏è Cache Coqui models
        if: steps.schedule_check.outputs.should_post == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.local/share/tts
          key: coqui-models-mystery-${{ runner.os }}

      - name: üìÅ Create tmp folder
        if: steps.schedule_check.outputs.should_post == 'true'
        run: |
          mkdir -p tmp
          chmod -R 777 tmp
          echo "üîç Workspace ready for mystery archives"

      - name: üìã Restore platform config
        if: steps.schedule_check.outputs.should_post == 'true'
        uses: actions/cache/restore@v4
        with:
          path: tmp/platform_config.json
          key: platform-config-mystery-${{ github.run_number }}
          restore-keys: |
            platform-config-mystery-
            platform-config-

      - name: üìö Restore playlist config
        if: steps.schedule_check.outputs.should_post == 'true'
        uses: actions/cache/restore@v4
        with:
          path: tmp/playlist_config.json
          key: playlist-config-mystery-${{ github.run_number }}
          restore-keys: |
            playlist-config-mystery-
            playlist-config-

      - name: üìñ Restore content history
        if: steps.schedule_check.outputs.should_post == 'true'
        uses: actions/cache/restore@v4
        with:
          path: tmp/content_history.json
          key: content-history-mystery-${{ github.run_number }}
          restore-keys: |
            content-history-mystery-
            content-history-

      - name: üì¶ Install Python packages
        if: steps.schedule_check.outputs.should_post == 'true'
        run: |
          python -m pip install --upgrade pip -q
          pip install -r requirements.txt -q
          echo "üîç Python dependencies installed"

      - name: üéµ Download background music library
        if: steps.schedule_check.outputs.should_post == 'true'
        run: |
          echo "üéµ Downloading copyright-free dark ambient music..."
          python .github/scripts/download_music.py --download-all
        continue-on-error: true

      - name: üîç Fetch trending mystery topics
        if: steps.schedule_check.outputs.should_post == 'true'
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          CONTENT_TYPE: ${{ steps.schedule_check.outputs.content_type }}
          MYSTERY_TYPE: ${{ github.event.inputs.mystery_type }}
        run: |
          echo "üîç Fetching trending mystery topics..."
          python .github/scripts/fetch_trending.py

      - name: ‚úçÔ∏è Generate mystery script
        if: steps.schedule_check.outputs.should_post == 'true'
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          CONTENT_TYPE: ${{ steps.schedule_check.outputs.content_type }}
          PRIORITY: ${{ steps.schedule_check.outputs.priority }}
          MYSTERY_TYPE: ${{ github.event.inputs.mystery_type }}
        run: python .github/scripts/generate_trending_and_script.py

      - name: üéôÔ∏è Generate mysterious voiceover
        if: steps.schedule_check.outputs.should_post == 'true'
        env:
          CONTENT_TYPE: ${{ steps.schedule_check.outputs.content_type }}
        run: python .github/scripts/generate_tts.py

      - name: üé¨ Create film noir mystery video
        if: steps.schedule_check.outputs.should_post == 'true'
        env:
          HUGGINGFACE_API_KEY: ${{ secrets.HUGGINGFACE_API_KEY }}
          CONTENT_TYPE: ${{ steps.schedule_check.outputs.content_type }}
        run: python .github/scripts/create_video.py

      - name: üñºÔ∏è Generate mysterious thumbnail
        if: steps.schedule_check.outputs.should_post == 'true'
        env:
          HUGGINGFACE_API_KEY: ${{ secrets.HUGGINGFACE_API_KEY }}
          CONTENT_TYPE: ${{ steps.schedule_check.outputs.content_type }}
        run: python .github/scripts/generate_thumbnail.py

      - name: üßπ Clean up temporary files
        if: steps.schedule_check.outputs.should_post == 'true'
        run: |
          find tmp -name "scene_*.jpg" -type f -delete 2>/dev/null || true
          find tmp -name "*_noir.jpg" -type f -delete 2>/dev/null || true
          rm -f tmp/short_ready.mp4 2>/dev/null || true
          echo "üßπ Cleaned up temporary files"

      - name: üì§ Upload to multiple platforms
        if: steps.schedule_check.outputs.should_post == 'true'
        env:
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REFRESH_TOKEN: ${{ secrets.GOOGLE_REFRESH_TOKEN }}
          TIKTOK_ACCESS_TOKEN: ${{ secrets.TIKTOK_ACCESS_TOKEN }}
          INSTAGRAM_ACCESS_TOKEN: ${{ secrets.INSTAGRAM_ACCESS_TOKEN }}
          INSTAGRAM_ACCOUNT_ID: ${{ secrets.INSTAGRAM_ACCOUNT_ID }}
          FACEBOOK_PAGE_ID: ${{ secrets.FACEBOOK_PAGE_ID }}
          FACEBOOK_ACCESS_TOKEN: ${{ secrets.FACEBOOK_ACCESS_TOKEN }}
          MAKECOM_WEBHOOK_URL: ${{ secrets.MAKECOM_WEBHOOK_URL }}
          PLATFORMS: ${{ github.event.inputs.platforms }}
          FORCE_ALL: ${{ github.event.inputs.force_all }}
          CONTENT_TYPE: ${{ steps.schedule_check.outputs.content_type }}
        run: python .github/scripts/upload_multiplatform.py

      - name: üîç Find actual video file
        if: success() && steps.schedule_check.outputs.should_post == 'true'
        id: find_video
        run: |
          if [ -f tmp/short.mp4 ]; then
            VIDEO_PATH="tmp/short.mp4"
          else
            VIDEO_PATH=$(find tmp -name "*.mp4" -type f | head -n 1)
          fi
          
          if [ -z "$VIDEO_PATH" ]; then
            echo "‚ùå No video file found!"
            exit 1
          fi
          
          VIDEO_PATH=$(realpath "$VIDEO_PATH")
          echo "video_path=$VIDEO_PATH" >> $GITHUB_OUTPUT
          echo "video_name=$(basename $VIDEO_PATH)" >> $GITHUB_OUTPUT
          
          VIDEO_SIZE=$(stat -c%s "$VIDEO_PATH" 2>/dev/null || stat -f%z "$VIDEO_PATH")
          echo "‚úÖ Video validated: $VIDEO_PATH ($VIDEO_SIZE bytes)"

      - name: Prepare Make.com payload
        if: success() && steps.schedule_check.outputs.should_post == 'true'
        id: makecom_prep
        run: |
          TITLE=$(jq -r '.title' tmp/script.json)
          DESCRIPTION=$(jq -r '.description' tmp/script.json)
          HASHTAGS=$(jq -r '.hashtags | join(" ")' tmp/script.json)
          VIDEO_PATH="${{ steps.find_video.outputs.video_path }}"
          VIDEO_SIZE=$(stat -c%s "$VIDEO_PATH" 2>/dev/null || stat -f%z "$VIDEO_PATH")
          YOUTUBE_URL=""
          FACEBOOK_URL=""
          if [ -f tmp/multiplatform_log.json ]; then
            YOUTUBE_URL=$(jq -r '.[-1].results[] | select(.platform=="youtube") | .url // ""' tmp/multiplatform_log.json)
            FACEBOOK_URL=$(jq -r '.[-1].results[] | select(.platform=="facebook") | .url // ""' tmp/multiplatform_log.json)
          fi
          cat > tmp/makecom_payload.json <<EOF
          {
            "title": "$TITLE",
            "description": "$DESCRIPTION",
            "hashtags": "$HASHTAGS",
            "video_name": "$(basename $VIDEO_PATH)",
            "video_size_mb": $(echo "scale=2; $VIDEO_SIZE/1024/1024" | bc),
            "workflow_run": "${{ github.run_number }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "platform_urls": {
              "youtube": "$YOUTUBE_URL",
              "facebook": "$FACEBOOK_URL"
            }
          }
          EOF
          echo "‚úÖ Make.com payload prepared"

      - name: Upload video to Cloudinary for Make.com
        if: success() && steps.schedule_check.outputs.should_post == 'true'
        id: upload_temp
        env:
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
          VIDEO_TO_UPLOAD: ${{ steps.find_video.outputs.video_path }}
        run: |
          echo "üì§ Uploading video to Cloudinary..."
          python .github/scripts/upload_to_cloudinary.py
          VIDEO_URL=$(cat tmp/video_url.txt)
          echo "video_url=$VIDEO_URL" >> $GITHUB_OUTPUT
          echo "‚úÖ Video URL: $VIDEO_URL"

      - name: Send to Make.com webhook
        if: success() && steps.schedule_check.outputs.should_post == 'true'
        run: |
          PAYLOAD=$(cat tmp/makecom_payload.json)
          VIDEO_URL="${{ steps.upload_temp.outputs.video_url }}"
          VIDEO_NAME="${{ steps.find_video.outputs.video_name }}"
          curl -X POST "${{ secrets.MAKECOM_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"video_url\": \"$VIDEO_URL\",
              \"video_name\": \"$VIDEO_NAME\",
              \"metadata\": $PAYLOAD,
              \"artifact_url\": \"https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\",
              \"github\": {
                \"run_id\": \"${{ github.run_id }}\",
                \"run_number\": \"${{ github.run_number }}\",
                \"repository\": \"${{ github.repository }}\"
              }
            }"
          echo "‚úÖ Webhook sent to Make.com"

      - name: üìö Organize into mysterious playlists
        if: success() && steps.schedule_check.outputs.should_post == 'true'
        env:
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REFRESH_TOKEN: ${{ secrets.GOOGLE_REFRESH_TOKEN }}
          CONTENT_TYPE: ${{ steps.schedule_check.outputs.content_type }}
        run: python .github/scripts/manage_playlists.py

      - name: üíæ Save platform config
        uses: actions/cache/save@v4
        if: always() && steps.schedule_check.outputs.should_post == 'true'
        with:
          path: tmp/platform_config.json
          key: platform-config-mystery-${{ github.run_number }}

      - name: üíæ Save playlist config
        uses: actions/cache/save@v4
        if: always() && steps.schedule_check.outputs.should_post == 'true'
        with:
          path: tmp/playlist_config.json
          key: playlist-config-mystery-${{ github.run_number }}

      - name: üíæ Save content history
        uses: actions/cache/save@v4
        if: always() && steps.schedule_check.outputs.should_post == 'true'
        with:
          path: tmp/content_history.json
          key: content-history-mystery-${{ github.run_number }}

      - name: üì¶ Upload artifacts
        uses: actions/upload-artifact@v4
        if: always() && steps.schedule_check.outputs.should_post == 'true'
        with:
          name: mysterious-short-${{ github.run_number }}
          path: |
            tmp/*.mp4
            tmp/thumbnail.png
            tmp/script.json
            tmp/content_history.json
            tmp/multiplatform_log.json
            tmp/voice.mp3
          retention-days: 30

      - name: üìã Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: error-logs-mystery-${{ github.run_number }}
          path: tmp/*.log
          retention-days: 7

      - name: üî• Workflow Summary
        if: always()
        run: |
          echo "## üîç Mystery Archives - Pipeline Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**‚è∞ Run Time (EST):** \`${{ steps.schedule_check.outputs.current_time }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**‚úÖ Posted This Run:** \`${{ steps.schedule_check.outputs.should_post }}\`" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.schedule_check.outputs.should_post }}" == "true" ]]; then
            echo "**‚≠ê Priority:** \`${{ steps.schedule_check.outputs.priority }}\`" >> $GITHUB_STEP_SUMMARY
            echo "**üîç Content Type:** \`${{ steps.schedule_check.outputs.content_type }}\`" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîÆ Mythica Report Posting Schedule" >> $GITHUB_STEP_SUMMARY
          echo "This workflow is governed by the **Mythica Report Optimal Scheduler**, which posts at peak engagement hours in the **US/Eastern** timezone." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Day       | Time(s) (EST)     | Content Pillar(s) |" >> $GITHUB_STEP_SUMMARY
          echo "|:----------|:------------------|:------------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Monday    | 8 PM              | Unsolved True Crime |" >> $GITHUB_STEP_SUMMARY
          echo "| Tuesday   | 9 PM              | Paranormal Hauntings |" >> $GITHUB_STEP_SUMMARY
          echo "| Wednesday | 8 PM              | Historical Mysteries |" >> $GITHUB_STEP_SUMMARY
          echo "| Thursday  | 9 PM              | Cosmic & Sci-Fi |" >> $GITHUB_STEP_SUMMARY
          echo "| Friday    | 3 PM, 9 PM        | Internet, True Crime |" >> $GITHUB_STEP_SUMMARY
          echo "| Saturday  | 12 PM, 4 PM, 9 PM | High Strangeness, Historical, Paranormal |" >> $GITHUB_STEP_SUMMARY
          echo "| Sunday    | 7 PM              | Unsolved True Crime |" >> $GITHUB_STEP_SUMMARY