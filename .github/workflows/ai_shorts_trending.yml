name: 🔍 The Mystery Archives - Automated Mystery Shorts Pipeline

on:
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Platforms to upload to (comma-separated: youtube,tiktok,instagram,facebook,makecom)'
        required: false
        default: 'youtube,facebook'
      force_all:
        description: 'Force upload to all enabled platforms'
        required: false
        type: boolean
        default: false
      ignore_schedule:
        description: 'Ignore optimal timing and post immediately'
        required: false
        type: boolean
        default: false
      mystery_type:
        description: 'Mystery category (disappearance, crime, historical, conspiracy, auto)'
        required: false
        default: 'auto'
      intensity:
        description: 'Content intensity (aggressive, balanced, inspirational)'
        required: false
        default: 'balanced'
        
  schedule:
    # Precise schedule matching the optimal posting times in UTC from posting_schedule.json
    
    # Monday
    - cron: '0 19 * * 1'    # 19:00 UTC - unsolved_true_crime (high)
    - cron: '0 23 * * 1'    # 23:00 UTC - historical_mysteries (medium)

    # Tuesday  
    - cron: '0 18 * * 2'    # 18:00 UTC - paranormal_hauntings (high)
    - cron: '0 22 * * 2'    # 22:00 UTC - cosmic_and_sci_fi (highest)

    # Wednesday
    - cron: '0 2 * * 3'     # 02:00 UTC - high_strangeness (medium)
    - cron: '0 20 * * 3'    # 20:00 UTC - unsolved_true_crime (high)
    - cron: '0 23 * * 3'    # 23:00 UTC - historical_mysteries (medium)

    # Thursday
    - cron: '0 19 * * 4'    # 19:00 UTC - cosmic_and_sci_fi (highest)
    - cron: '0 21 * * 4'    # 23:00 UTC - paranormal_hauntings (high)

    # Friday
    - cron: '0 18 * * 5'    # 18:00 UTC - internet_and_modern (high)
    - cron: '0 22 * * 5'    # 22:00 UTC - unsolved_true_crime (highest)

    # Saturday
    - cron: '0 2 * * 6'     # 02:00 UTC - high_strangeness (medium)
    - cron: '0 18 * * 6'    # 18:00 UTC - historical_mysteries (medium)
    - cron: '0 22 * * 6'    # 22:00 UTC - paranormal_hauntings (high)

    # Sunday
    - cron: '0 19 * * 0'    # 19:00 UTC - unsolved_true_crime (high)
    - cron: '0 23 * * 0'    # 23:00 UTC - cosmic_and_sci_fi (highest)

jobs:
  build_and_upload:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: 🔍 Checkout Mystery Archives
        uses: actions/checkout@v4

      - name: 🔐 Validate secrets
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          HUGGINGFACE_API_KEY: ${{ secrets.HUGGINGFACE_API_KEY }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REFRESH_TOKEN: ${{ secrets.GOOGLE_REFRESH_TOKEN }}
          MAKECOM_WEBHOOK_URL: ${{ secrets.MAKECOM_WEBHOOK_URL }}
        run: python .github/scripts/validate_secrets.py

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 💾 Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-mystery-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-mystery-
            ${{ runner.os }}-pip-

      - name: 📦 Install Python packages (for scheduler check)
        run: |
          python -m pip install --upgrade pip
          pip install pytz

      - name: 🎯 Confirm Scheduled Run and Set Parameters
        id: schedule_check
        env:
          IGNORE_SCHEDULE: ${{ github.event.inputs.ignore_schedule }}
        run: python .github/scripts/optimal_scheduler.py

      - name: 📅 Display mystery scheduling decision
        run: |
          echo "⏰ Current Time (UTC): ${{ steps.schedule_check.outputs.current_time }}"
          echo "🎯 Should Post: ${{ steps.schedule_check.outputs.should_post }}"
          echo "⭐ Priority: ${{ steps.schedule_check.outputs.priority }}"
          echo "🔍 Content Type: ${{ steps.schedule_check.outputs.content_type }}"
          echo ""
          echo "💡 Logic: This workflow runs ONLY at specific scheduled times or when manually forced."

      - name: ⏸️ Skip if not a valid run
        if: steps.schedule_check.outputs.should_post != 'true'
        run: |
          echo "⏸️ Skipping run - not a scheduled time or a forced manual run."
          echo "ℹ️ To run immediately, use the 'Run workflow' button with 'ignore_schedule' set to true."
          exit 0

      # ... (The rest of your workflow from "Cache apt packages" onwards remains IDENTICAL)
      # ... All `if: steps.schedule_check.outputs.should_post == 'true'` conditions will work as expected.
      
      - name: 📦 Cache apt packages
        if: steps.schedule_check.outputs.should_post == 'true'
        uses: actions/cache@v4
        with:
          path: |
            /var/cache/apt/archives
            /var/lib/apt/lists
          key: ${{ runner.os }}-apt-mystery-${{ hashFiles('.github/workflows/mystery_shorts.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-mystery-
            ${{ runner.os }}-apt-

      - name: 🔧 Install system deps
        if: steps.schedule_check.outputs.should_post == 'true'
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y -qq \
            ffmpeg \
            libsm6 \
            libxext6 \
            imagemagick \
            fonts-dejavu-core \
            fonts-liberation \
            fonts-freefont-ttf \
            fonts-dejavu \
            espeak-ng
          echo "🔍 System ready for mystery content generation"

      - name: 🎙️ Cache Coqui models
        if: steps.schedule_check.outputs.should_post == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.local/share/tts
          key: coqui-models-mystery-${{ runner.os }}

      - name: 📁 Create tmp folder
        if: steps.schedule_check.outputs.should_post == 'true'
        run: |
          mkdir -p tmp
          chmod -R 777 tmp
          echo "🔍 Workspace ready for mystery archives"

      - name: 📋 Restore platform config
        if: steps.schedule_check.outputs.should_post == 'true'
        uses: actions/cache/restore@v4
        with:
          path: tmp/platform_config.json
          key: platform-config-mystery-${{ github.run_number }}
          restore-keys: |
            platform-config-mystery-
            platform-config-

      - name: 📚 Restore playlist config
        if: steps.schedule_check.outputs.should_post == 'true'
        uses: actions/cache/restore@v4
        with:
          path: tmp/playlist_config.json
          key: playlist-config-mystery-${{ github.run_number }}
          restore-keys: |
            playlist-config-mystery-
            playlist-config-

      - name: 📖 Restore content history
        if: steps.schedule_check.outputs.should_post == 'true'
        uses: actions/cache/restore@v4
        with:
          path: tmp/content_history.json
          key: content-history-mystery-${{ github.run_number }}
          restore-keys: |
            content-history-mystery-
            content-history-

      - name: 📦 Install Python packages
        if: steps.schedule_check.outputs.should_post == 'true'
        run: |
          python -m pip install --upgrade pip -q
          pip install -r requirements.txt -q
          echo "🔍 Python dependencies installed"

      - name: 🎵 Download background music library
        if: steps.schedule_check.outputs.should_post == 'true'
        run: |
          echo "🎵 Downloading copyright-free dark ambient music..."
          python .github/scripts/download_music.py --download-all
        continue-on-error: true

      - name: 🔍 Fetch trending mystery topics
        if: steps.schedule_check.outputs.should_post == 'true'
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          CONTENT_TYPE: ${{ steps.schedule_check.outputs.content_type }}
          MYSTERY_TYPE: ${{ github.event.inputs.mystery_type }}
        run: |
          echo "🔍 Fetching trending mystery topics..."
          python .github/scripts/fetch_trending.py

      - name: ✍️ Generate mystery script
        if: steps.schedule_check.outputs.should_post == 'true'
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          CONTENT_TYPE: ${{ steps.schedule_check.outputs.content_type }}
          PRIORITY: ${{ steps.schedule_check.outputs.priority }}
          MYSTERY_TYPE: ${{ github.event.inputs.mystery_type }}
        run: python .github/scripts/generate_trending_and_script.py

      - name: 🎙️ Generate mysterious voiceover
        if: steps.schedule_check.outputs.should_post == 'true'
        env:
          CONTENT_TYPE: ${{ steps.schedule_check.outputs.content_type }}
        run: python .github/scripts/generate_tts.py

      - name: 🎬 Create film noir mystery video
        if: steps.schedule_check.outputs.should_post == 'true'
        env:
          HUGGINGFACE_API_KEY: ${{ secrets.HUGGINGFACE_API_KEY }}
          CONTENT_TYPE: ${{ steps.schedule_check.outputs.content_type }}
        run: python .github/scripts/create_video.py

      - name: 🖼️ Generate mysterious thumbnail
        if: steps.schedule_check.outputs.should_post == 'true'
        env:
          HUGGINGFACE_API_KEY: ${{ secrets.HUGGINGFACE_API_KEY }}
          CONTENT_TYPE: ${{ steps.schedule_check.outputs.content_type }}
        run: python .github/scripts/generate_thumbnail.py

      - name: 🧹 Clean up temporary files
        if: steps.schedule_check.outputs.should_post == 'true'
        run: |
          find tmp -name "scene_*.jpg" -type f -delete 2>/dev/null || true
          find tmp -name "*_noir.jpg" -type f -delete 2>/dev/null || true
          rm -f tmp/short_ready.mp4 2>/dev/null || true
          echo "🧹 Cleaned up temporary files"

      - name: 📤 Upload to multiple platforms
        if: steps.schedule_check.outputs.should_post == 'true'
        env:
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REFRESH_TOKEN: ${{ secrets.GOOGLE_REFRESH_TOKEN }}
          TIKTOK_ACCESS_TOKEN: ${{ secrets.TIKTOK_ACCESS_TOKEN }}
          INSTAGRAM_ACCESS_TOKEN: ${{ secrets.INSTAGRAM_ACCESS_TOKEN }}
          INSTAGRAM_ACCOUNT_ID: ${{ secrets.INSTAGRAM_ACCOUNT_ID }}
          FACEBOOK_PAGE_ID: ${{ secrets.FACEBOOK_PAGE_ID }}
          FACEBOOK_ACCESS_TOKEN: ${{ secrets.FACEBOOK_ACCESS_TOKEN }}
          MAKECOM_WEBHOOK_URL: ${{ secrets.MAKECOM_WEBHOOK_URL }}
          PLATFORMS: ${{ github.event.inputs.platforms }}
          FORCE_ALL: ${{ github.event.inputs.force_all }}
          CONTENT_TYPE: ${{ steps.schedule_check.outputs.content_type }}
        run: python .github/scripts/upload_multiplatform.py

      - name: 🔎 Find Renamed Video and Compress for Cloudinary
        if: steps.schedule_check.outputs.should_post == 'true'
        id: find_and_compress
        run: |
          # Find the video file in the tmp directory, which was likely renamed by the uploader.
          # This handles cases where it's `short.mp4` or `SEO-Optimized Title.mp4`.
          VIDEO_PATH=$(find tmp -name "*.mp4" -type f | head -n 1)

          if [ -z "$VIDEO_PATH" ]; then
            echo "❌ CRITICAL: No video file found in tmp/ directory after upload step!"
            exit 1
          fi

          echo "Found original video for compression: $VIDEO_PATH"
          ls -lh "$VIDEO_PATH"

          # Define the output path for the compressed version
          COMPRESSED_PATH="tmp/compressed_for_makecom.mp4"

          # Re-compress the FOUND video with a much lower bitrate
          # --- START TWO-PASS ENCODING BLOCK ---
          
          # Define a strict target bitrate for video to stay under 5MB for a ~60s clip
          # Calculation: (5MB * 8000) / 60s = ~667 kbps total. Let's give audio 96k, so video gets ~550k.
          TARGET_VIDEO_BITRATE="550k"
          TARGET_AUDIO_BITRATE="96k"

          echo "Targeting video bitrate: $TARGET_VIDEO_BITRATE"

          # Pass 1: Analyze the video and generate a stats file. Output is discarded.
          echo "Starting Pass 1..."
          ffmpeg -y -i "$VIDEO_PATH" -c:v libx264 -preset veryfast -b:v $TARGET_VIDEO_BITRATE -pass 1 -an -f mp4 /dev/null

          # Pass 2: Use the stats file to perform the actual encoding, guaranteeing the size.
          echo "Starting Pass 2..."
          ffmpeg -i "$VIDEO_PATH" -c:v libx264 -preset veryfast -b:v $TARGET_VIDEO_BITRATE -pass 2 -c:a aac -b:a $TARGET_AUDIO_BITRATE -y "$COMPRESSED_PATH"

          # Clean up the ffmpeg log files
          rm -f ffmpeg2pass-0.log ffmpeg2pass-0.log.mbtree

          # --- END TWO-PASS ENCODING BLOCK ---
          
          echo "Compressed video created:"
          ls -lh "$COMPRESSED_PATH"
          
          # Output the paths for subsequent steps
          echo "original_path=$VIDEO_PATH" >> $GITHUB_OUTPUT
          echo "compressed_path=$(realpath $COMPRESSED_PATH)" >> $GITHUB_OUTPUT

      - name: Prepare Make.com payload
        if: success() && steps.schedule_check.outputs.should_post == 'true'
        id: makecom_prep
        run: |
          TITLE=$(jq -r '.title' tmp/script.json)
          DESCRIPTION=$(jq -r '.description' tmp/script.json)
          HASHTAGS=$(jq -r '.hashtags | join(" ")' tmp/script.json)
          
          # ✅ CRITICAL CHANGE: Use the SEO-named path from the find_and_compress step
          VIDEO_PATH="${{ steps.find_and_compress.outputs.original_path }}"
          
          VIDEO_SIZE=$(stat -c%s "$VIDEO_PATH" 2>/dev/null || stat -f%z "$VIDEO_PATH")
          YOUTUBE_URL=""
          FACEBOOK_URL=""
          if [ -f tmp/multiplatform_log.json ]; then
            YOUTUBE_URL=$(jq -r '.[-1].results[] | select(.platform=="youtube") | .url // ""' tmp/multiplatform_log.json)
            FACEBOOK_URL=$(jq -r '.[-1].results[] | select(.platform=="facebook") | .url // ""' tmp/multiplatform_log.json)
          fi
          cat > tmp/makecom_payload.json <<EOF
          {
            "title": "$TITLE",
            "description": "$DESCRIPTION",
            "hashtags": "$HASHTAGS",
            "video_name": "$(basename "$VIDEO_PATH")",
            "video_size_mb": $(echo "scale=2; $VIDEO_SIZE/1024/1024" | bc),
            "workflow_run": "${{ github.run_number }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "platform_urls": {
              "youtube": "$YOUTUBE_URL",
              "facebook": "$FACEBOOK_URL"
            }
          }
          EOF
          echo "✅ Make.com payload prepared"

      - name: Upload video to Cloudinary for Make.com
        if: success() && steps.schedule_check.outputs.should_post == 'true'
        id: upload_temp
        env:
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
          # ✅ CRITICAL CHANGE: Use the correct path from the new step
          VIDEO_TO_UPLOAD: ${{ steps.find_and_compress.outputs.compressed_path }}
        run: |
          echo "📤 Uploading COMPRESSED video to Cloudinary..."
          python .github/scripts/upload_to_cloudinary.py
          VIDEO_URL=$(cat tmp/video_url.txt)
          echo "video_url=$VIDEO_URL" >> $GITHUB_OUTPUT
          echo "✅ Video URL: $VIDEO_URL"

      - name: Send to Make.com webhook
        if: success() && steps.schedule_check.outputs.should_post == 'true'
        run: |
          PAYLOAD=$(cat tmp/makecom_payload.json)
          VIDEO_URL="${{ steps.upload_temp.outputs.video_url }}"
          
          # ✅ CORRECT WAY to get the SEO-optimized video name
          VIDEO_NAME=$(basename "${{ steps.find_and_compress.outputs.original_path }}")
          
          curl -X POST "${{ secrets.MAKECOM_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"video_url\": \"$VIDEO_URL\",
              \"video_name\": \"$VIDEO_NAME\",
              \"metadata\": $PAYLOAD,
              \"artifact_url\": \"https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\",
              \"github\": {
                \"run_id\": \"${{ github.run_id }}\",
                \"run_number\": \"${{ github.run_number }}\",
                \"repository\": \"${{ github.repository }}\"
              }
            }"
          echo "✅ Webhook sent to Make.com"

      - name: 📚 Organize into mysterious playlists
        if: success() && steps.schedule_check.outputs.should_post == 'true'
        env:
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REFRESH_TOKEN: ${{ secrets.GOOGLE_REFRESH_TOKEN }}
          CONTENT_TYPE: ${{ steps.schedule_check.outputs.content_type }}
        run: python .github/scripts/manage_playlists.py

      - name: 💾 Save platform config
        uses: actions/cache/save@v4
        if: always() && steps.schedule_check.outputs.should_post == 'true'
        with:
          path: tmp/platform_config.json
          key: platform-config-mystery-${{ github.run_number }}

      - name: 💾 Save playlist config
        uses: actions/cache/save@v4
        if: always() && steps.schedule_check.outputs.should_post == 'true'
        with:
          path: tmp/playlist_config.json
          key: playlist-config-mystery-${{ github.run_number }}

      - name: 💾 Save content history
        uses: actions/cache/save@v4
        if: always() && steps.schedule_check.outputs.should_post == 'true'
        with:
          path: tmp/content_history.json
          key: content-history-mystery-${{ github.run_number }}

      - name: 📦 Upload artifacts
        uses: actions/upload-artifact@v4
        if: always() && steps.schedule_check.outputs.should_post == 'true'
        with:
          name: mysterious-short-${{ github.run_number }}
          path: |
            tmp/*.mp4
            tmp/thumbnail.png
            tmp/script.json
            tmp/content_history.json
            tmp/multiplatform_log.json
            tmp/voice.mp3
          retention-days: 30

      - name: 📋 Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: error-logs-mystery-${{ github.run_number }}
          path: tmp/*.log
          retention-days: 7

      - name: 🔥 Workflow Summary
        if: always()
        run: |
          echo "## 🔍 Mystery Archives - Pipeline Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**⏰ Run Time (UTC):** \`${{ steps.schedule_check.outputs.current_time }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**✅ Posted This Run:** \`${{ steps.schedule_check.outputs.should_post }}\`" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.schedule_check.outputs.should_post }}" == "true" ]]; then
            echo "**⭐ Priority:** \`${{ steps.schedule_check.outputs.priority }}\`" >> $GITHUB_STEP_SUMMARY
            echo "**🔍 Content Type:** \`${{ steps.schedule_check.outputs.content_type }}\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "> The workflow did not run because it was not triggered at a scheduled time or manually forced with the 'ignore_schedule' option." >> $GITHUB_STEP_SUMMARY
          fi